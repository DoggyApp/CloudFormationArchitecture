AWSTemplateFormatVersion: "2010-09-09"
Description: Creates IAM roles for EKS and mgmt services #for use with mitigated risk of escalation attacks 

Parameters:
  #Tag parameters 
  owner: 
    Type: String
  ownerEmail: 
    Type: String
  environment: 
    Type: String
    AllowedValues: 
      - production
      - development
  project: 
    Type: String

Resources: 
  eksClusterRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: eks-cluster-role-dpl
      Description: The role and it's permissions adopted by eks cluster to perform control place funstions neccessary to connect to and manage eks nodes
      AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
            - Effect: Allow
              Principal:
                Service: eks.amazonaws.com
              Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags: 
        - Key: Name 
          Value: !Join ['-', [!Ref 'AWS::StackName', role ]]
        - Key: owner
          Value: !Ref owner
        - Key: OwnerEmail 
          Value: !Ref ownerEmail
        - Key: Environment 
          Value: !Ref environment 
        - Key: project 
          Value: !Ref project 
  
  eksNodeGroupRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: eks-worker-node-service-dpl
      Description: The role and it s permissions adopted by eks worker nodes to perform pod auto scaling and other core functions
      AssumeRolePolicyDocument: 
         Version: "2012-10-17"
         Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags: 
        - Key: Name 
          Value: !Join ['-', [!Ref 'AWS::StackName', role ]]
        - Key: owner
          Value: !Ref owner
        - Key: OwnerEmail 
          Value: !Ref ownerEmail
        - Key: Environment 
          Value: !Ref environment 
        - Key: project 
          Value: !Ref project 

  ClusterAutoscalerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cluster-autoscaler-role-doggyapp
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
      Policies:
        - PolicyName: ClusterAutoscalerPolicy
          Description: The role policy used to allow the autoscaling pod to execute scaling on the eks node groups themselves 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeTags
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - ec2:DescribeLaunchTemplateVersions
                Resource: "*"


Outputs:
  clusterRoleArn: 
    Value: !GetAtt eksClusterRole.Arn

  nodeRoleArn: 
    Value: !GetAtt eksNodeGroupRole.Arn


        
