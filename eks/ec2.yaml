AWSTemplateFormatVersion: "2010-09-09"
Description: EKS stack which creates EKS cluster and worker groups 

Parameters:
#Secret Parameters 
  AdminAccessKey:
    Type: String
  AdminSecretKey:
    Type: String

#Env Parameters 
  Email: 
    Type: String
  AWSID:
    Type: String
  OpenAISecret:
    Type: String

#Imported Parameters 
  managerSGid: 
    Type: String
  ec2KeyId: 
    Type: String 
  privateSubnet0id: 
    Type: String
  mgmtInstanceRoleArn: 
    Type: String
  mgmtInstanceRole: 
    Type: String
#Stack Parameters 
  volumeType: 
    Type: String
    Default: gp3 
    AllowedValues: 
      - gp2
      - gp3
  disableApiTermination: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  ebsOptimized: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  keyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Default: doggyApp-mgmt-keyPair
  imageId: 
    Type: String 
    Default: graviton
    AllowedValues:
      - graviton 
      - x86
  instanceSize: 
    Type: String
    Default: medium 
    AllowedValues: 
      - small 
      - medium 
#Tag parameters 
  owner: 
    Type: String
  ownerEmail: 
    Type: String
  environment: 
    Type: String
    AllowedValues: 
      - production
      - development
  project: 
    Type: String

Mappings: 
  amiId: 
    us-east-1: 
      graviton: ami-03a45a5ac837f33b7 
      x86: ami-0b5eea76982371e91

  instanceMap: 
    graviton: 
      small: t4g.small
      medium: t4g.medium 
    x84: 
      small: t4.small 
      medium: t4.medium 

Resources: 
  mgmtLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: '/dev/xvda'
            Ebs: 
              DeleteOnTermination: True
              Encrypted: True
              KmsKeyId: !Ref ec2KeyId
              VolumeSize: 8 
              VolumeType: !Ref volumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            echo "UserData test ran at $(date)" > /tmp/userdata-test.log

            # Redirect all output to a log file
            exec > /var/log/user-data.log 2>&1

            export CLUSTER_NAME="doggy-app-eks-cluster-0"
            export NODEGROUP_NAME="doggy-app-eks-ng-monitoring"

            aws sts get-caller-identity

            echo "===== USER DATA SCRIPT START ====="

            # Wait for networking
            sleep 15

            echo "[INFO] Installing kubectl..."
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/arm64/kubectl
            mv kubectl /usr/local/bin/
            chmod +x /usr/local/bin/kubectl

            echo "[INFO] Installing AWS CLI v2..."
            yum remove -y awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

            echo "[INFO] Installing eksctl..."
            curl -LO "https://github.com/eksctl-io/eksctl/releases/download/v0.207.0/eksctl_Linux_arm64.tar.gz"
            tar -xzf eksctl_Linux_arm64.tar.gz
            mv eksctl /usr/local/bin/
            chmod +x /usr/local/bin/eksctl

            echo "[INFO] Configuring AWS CLI credentials..."
            mkdir -p /home/ec2-user/.aws
            chown ec2-user:ec2-user /home/ec2-user/.aws

            cat <<EOF > /home/ec2-user/.aws/config
            [default]
            role_arn = arn:aws:iam::109798190983:role/deploy-cfn-template-role
            region = us-east-1
            source_profile = eks-cluster-admin
            output = json

            [profile eks-cluster-admin]
            region = us-east-1
            EOF

            cat <<EOF > /home/ec2-user/.aws/credentials
            [eks-cluster-admin]
            aws_access_key_id = ${AdminAccessKey}
            aws_secret_access_key = ${AdminSecretKey}
            EOF

            echo "[INFO] Updating kubeconfig..."
            export PATH=$PATH:/usr/local/bin
            
            echo 'export AWS_PROFILE=eks-cluster-admin' >> /home/ec2-user/.bashrc

            # collect kubernetes architecture

            sudo yum install git -y

            git clone https://github.com/DoggyApp/kubernetesArchitecture.git /home/ec2-user/kubernetesArchitecture


            sudo yum groupinstall "Development Tools" -y
            
            sudo yum install -y \
              gcc \
              openssl11  \
              openssl11-devel \
              bzip2-devel \
              libffi-devel \
              zlib-devel \
              wget \
              make \
              libuuid-devel \
              sqlite-devel \
              readline-devel \
              xz-devel \
              gdbm-devel \
              tk-devel

            
            sudo wget https://www.python.org/ftp/python/3.10.14/Python-3.10.14.tgz -P /usr/src

            
            sudo tar xzf /usr/src/Python-3.10.14.tgz -C /usr/src

            
            cd /usr/src/Python-3.10.14 
            

            echo "sudo ./configure --enable-optimizations"
            sudo ./configure --enable-optimizations \
              --with-openssl=/usr \
              CPPFLAGS="-I/usr/include" \
              LDFLAGS="-L/usr/lib64"


            echo "sudo make -j$(nproc)"
            sudo make -j$(nproc)
            echo "sudo make install"
            sudo make install

            
            echo 'export PATH="/usr/local/bin:$PATH"' >> /home/ec2-user/.bashrc

            echo "python3.10 -m venv /home/ec2-user/py10-ansible-env"
            python3.10 -m venv /home/ec2-user/py10-ansible-env
            
            source /home/ec2-user/py10-ansible-env/bin/activate

            
            pip install --upgrade pip setuptools wheel

            
            pip install ansible boto3 botocore openshift kubernetes pyyaml


            ansible-galaxy collection install kubernetes.core


            echo "setup() {
                (
                  cd /home/ec2-user/kubernetesArchitecture/ansible || return 1
                  source /home/ec2-user/py10-ansible-env/bin/activate
                  ansible-playbook \\
                    -i inventory/hosts.yaml \\
                    playbooks/setup.yaml \\
                    -e 'email=idanzigm@gmail.com aws_id=109798190983 openai_secret_arn=arn:aws:secretsmanager:us-east-1:109798190983:secret:openai-key-NSazkz'
                )
              }" \
              >> /home/ec2-user/.bashrc

            echo "teardown() {
                (
                  cd /home/ec2-user/kubernetesArchitecture/ansible || return 1
                  source /home/ec2-user/py10-ansible-env/bin/activate
                  ansible-playbook \\
                    -i inventory/hosts.yaml \\
                    playbooks/teardown.yaml
                )
              }" \
              >> /home/ec2-user/.bashrc

            echo "source /home/ec2-user/py10-ansible-env/bin/activate" >> /home/ec2-user/.bashrc

            echo "aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME --profile eks-cluster-admin" >> /home/ec2-user/.bashrc

            aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME --profile eks-cluster-admin


            cd /home/ec2-user/kubernetesArchitecture/ansible 

            ansible-playbook \
              -i inventory/hosts.yaml \
              playbooks/setup.yaml \
              -e "email=${Email} aws_id=${AWSID} openai_secret_arn=${OpenAISecret}"


            echo "[INFO] User data script completed successfully!"
            echo "===== USER DATA SCRIPT END ====="
        DisableApiTermination: !Ref disableApiTermination
        EbsOptimized: !Ref ebsOptimized
        IamInstanceProfile: 
          Arn: !GetAtt mgmtInstanceProfile.Arn
        ImageId: !FindInMap [ amiId, !Ref 'AWS::Region', !Ref imageId] 
        InstanceType: !FindInMap [instanceMap, !Ref imageId, !Ref instanceSize]
        KeyName: !Ref keyName
        MetadataOptions: 
          HttpTokens: required 
        SecurityGroupIds: 
          - !Ref managerSGid
        TagSpecifications: 
            - ResourceType: instance 
              Tags: 
                - Key: Name 
                  Value: !Sub "${AWS::StackName}-management-ec2"
                - Key: owner
                  Value: !Ref owner
                - Key: OwnerEmail 
                  Value: !Ref ownerEmail
                - Key: Environment 
                  Value: !Ref environment 
                - Key: project 
                  Value: !Ref project 


  mgmtInstanceProfile: 
    Type: AWS::IAM::InstanceProfile 
    Properties:
      Roles:
        - !Ref mgmtInstanceRole

  mgmtInstance: 
    Type: AWS::EC2::Instance
    DependsOn: 
      - mgmtInstanceProfile 
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref mgmtLaunchTemplate
        Version: !GetAtt mgmtLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref privateSubnet0id

