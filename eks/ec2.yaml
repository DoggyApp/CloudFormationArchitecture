AWSTemplateFormatVersion: "2010-09-09"
Description: EKS stack which creates EKS cluster and worker groups 

Parameters:
#Imported Parameters 
  managerSGid: 
    Type: String
  ec2KeyId: 
    Type: String 
  privateSubnet0id: 
    Type: String
#Stack Parameters 
  volumeType: 
    Type: String
    Default: gp3 
    AllowedValues: 
      - gp2
      - gp3
  disableApiTermination: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  ebsOptimized: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  keyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Default: doggyApp-mgmt-keyPair
  imageId: 
    Type: String 
    Default: graviton
    AllowedValues:
      - graviton 
      - x86
  instanceSize: 
    Type: String
    Default: medium 
    AllowedValues: 
      - small 
      - medium 
#Tag parameters 
  owner: 
    Type: String
  ownerEmail: 
    Type: String
  environment: 
    Type: String
    AllowedValues: 
      - production
      - development
  project: 
    Type: String

Mappings: 
  amiId: 
    us-east-1: 
      graviton: ami-03a45a5ac837f33b7 
      x86: ami-0b5eea76982371e91

  instanceMap: 
    graviton: 
      small: t4g.small
      medium: t4g.medium 
    x84: 
      small: t4.small 
      medium: t4.medium 

Resources: 
  mgmtLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: '/dev/xvda'
            Ebs: 
              DeleteOnTermination: True
              Encrypted: True
              KmsKeyId: !Ref ec2KeyId
              VolumeSize: 8 
              VolumeType: !Ref volumeType
        DisableApiTermination: !Ref disableApiTermination
        EbsOptimized: !Ref ebsOptimized
        IamInstanceProfile: 
          Arn: !GetAtt mgmtInstanceProfile.Arn
        ImageId: !FindInMap [ amiId, !Ref 'AWS::Region', !Ref imageId] 
        InstanceType: !FindInMap [instanceMap, !Ref imageId, !Ref instanceSize]
        KeyName: !Ref keyName
        MetadataOptions: 
          HttpTokens: required 
        SecurityGroupIds: 
          - !Ref managerSGid
        TagSpecifications: 
            - ResourceType: instance 
              Tags: 
                - Key: Name 
                  Value: !Join ['-', [!Ref 'AWS::StackName', managment, ec2 ]]
                - Key: owner
                  Value: !Ref owner
                - Key: OwnerEmail 
                  Value: !Ref ownerEmail
                - Key: Environment 
                  Value: !Ref environment 
                - Key: project 
                  Value: !Ref project 


  mgmtInstanceProfile: 
    Type: AWS::IAM::InstanceProfile 
    Properties:
      Roles:
        - kubectl-control-base

  mgmtInstance: 
    Type: AWS::EC2::Instance
    DependsOn: 
      - mgmtInstanceProfile 
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref mgmtLaunchTemplate
        Version: !GetAtt mgmtLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref privateSubnet0id
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash 
            # install eksctl
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/arm64/kubectl
            # give eksctl executable privilage 
            chmod +x ./kubectl
            # add eksctl to the calss path 
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            # associate eksctl with the doggy app cluster
            aws eks update-kubeconfig --region us-east-1 --name doggy-app-eks-cluster-0

Output: 
  mgmtEc2Arn: !GetAtt mgmtInstance.Arn
