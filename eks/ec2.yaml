AWSTemplateFormatVersion: "2010-09-09"
Description: EKS stack which creates EKS cluster and worker groups 

Parameters:
#Secret Parameters 
  AdminAccessKey:
    Type: String
  AdminSecretKey:
    Type: String
#Imported Parameters 
  managerSGid: 
    Type: String
  ec2KeyId: 
    Type: String 
  publicSubnet0id: 
    Type: String
  mgmtInstanceRoleArn: 
    Type: String
  mgmtInstanceRole: 
    Type: String
#Stack Parameters 
  volumeType: 
    Type: String
    Default: gp3 
    AllowedValues: 
      - gp2
      - gp3
  disableApiTermination: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  ebsOptimized: 
    Type: String 
    Default: True
    AllowedValues: 
      - True
      - False
  keyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Default: doggyApp-mgmt-keyPair
  imageId: 
    Type: String 
    Default: graviton
    AllowedValues:
      - graviton 
      - x86
  instanceSize: 
    Type: String
    Default: medium 
    AllowedValues: 
      - small 
      - medium 
#Tag parameters 
  owner: 
    Type: String
  ownerEmail: 
    Type: String
  environment: 
    Type: String
    AllowedValues: 
      - production
      - development
  project: 
    Type: String

Mappings: 
  amiId: 
    us-east-1: 
      graviton: ami-03a45a5ac837f33b7 
      x86: ami-0b5eea76982371e91

  instanceMap: 
    graviton: 
      small: t4g.small
      medium: t4g.medium 
    x84: 
      small: t4.small 
      medium: t4.medium 

Resources: 
  mgmtLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: '/dev/xvda'
            Ebs: 
              DeleteOnTermination: True
              Encrypted: True
              KmsKeyId: !Ref ec2KeyId
              VolumeSize: 8 
              VolumeType: !Ref volumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            echo "UserData test ran at $(date)" > /tmp/userdata-test.log

            # Redirect all output to a log file
            exec > /var/log/user-data.log 2>&1

            aws sts get-caller-identity

            echo "===== USER DATA SCRIPT START ====="

            # Wait for networking
            sleep 15

            echo "[INFO] Installing kubectl..."
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/arm64/kubectl
            mv kubectl /usr/local/bin/
            chmod +x /usr/local/bin/kubectl

            echo "[INFO] Installing AWS CLI v2..."
            yum remove -y awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

            echo "[INFO] Installing eksctl..."
            curl -LO "https://github.com/eksctl-io/eksctl/releases/download/v0.207.0/eksctl_Linux_arm64.tar.gz"
            tar -xzf eksctl_Linux_arm64.tar.gz
            mv eksctl /usr/local/bin/
            chmod +x /usr/local/bin/eksctl

            echo "[INFO] Configuring AWS CLI credentials..."
            mkdir -p /home/ec2-user/.aws
            chown ec2-user:ec2-user /home/ec2-user/.aws

            cat <<EOF > /home/ec2-user/.aws/config
            [default]
            role_arn = arn:aws:iam::109798190983:role/deploy-cfn-template-role
            region = us-east-1
            source_profile = eks-cluster-admin
            output = json

            [profile eks-cluster-admin]
            region = us-east-1
            EOF

            cat <<EOF > /home/ec2-user/.aws/credentials
            [eks-cluster-admin]
            aws_access_key_id = ${AdminAccessKey}
            aws_secret_access_key = ${AdminSecretKey}
            EOF

            echo "[INFO] Updating kubeconfig..."
            export PATH=$PATH:/usr/local/bin
            
            echo 'export AWS_PROFILE=eks-cluster-admin' >> /home/ec2-user/.bashrc

            # collect kubernetes architecture

            sudo yum install git -y

            git clone https://github.com/DoggyApp/kubernetesArchitecture.git /home/ec2-user/kubernetesArchitecture

            echo "[INFO] User data script completed successfully!"
            echo "===== USER DATA SCRIPT END ====="
        DisableApiTermination: !Ref disableApiTermination
        EbsOptimized: !Ref ebsOptimized
        IamInstanceProfile: 
          Arn: !GetAtt mgmtInstanceProfile.Arn
        ImageId: !FindInMap [ amiId, !Ref 'AWS::Region', !Ref imageId] 
        InstanceType: !FindInMap [instanceMap, !Ref imageId, !Ref instanceSize]
        KeyName: !Ref keyName
        MetadataOptions: 
          HttpTokens: required 
        SecurityGroupIds: 
          - !Ref managerSGid
        TagSpecifications: 
            - ResourceType: instance 
              Tags: 
                - Key: Name 
                  Value: !Sub "${AWS::StackName}-management-ec2"
                - Key: owner
                  Value: !Ref owner
                - Key: OwnerEmail 
                  Value: !Ref ownerEmail
                - Key: Environment 
                  Value: !Ref environment 
                - Key: project 
                  Value: !Ref project 


  mgmtInstanceProfile: 
    Type: AWS::IAM::InstanceProfile 
    Properties:
      Roles:
        - !Ref mgmtInstanceRole

  mgmtInstance: 
    Type: AWS::EC2::Instance
    DependsOn: 
      - mgmtInstanceProfile 
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref mgmtLaunchTemplate
        Version: !GetAtt mgmtLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref publicSubnet0id

